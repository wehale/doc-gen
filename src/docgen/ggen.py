import google.generativeai as gai
import jsonlines as jsonl
import glob
import time
import os
import logging
import enlighten
import util.code_utils as code_utils


class GoogleAIGenerator:

    LOG_PREFIX = "[gai-gen]>"
    PBAR_COLOR = "blue"

    def __init__(self, args, key, config, manager):
        self._args = args
        self._key = key
        self._config = config
        self._model = gai.GenerativeModel(self._config['gllm']['model'])
        self._files = glob.glob(self._config['input']['doc_path']+"/*")
        self._prompts_file_str = self._config['gllm']['doc_prompts']
        self._log = logging.getLogger(__name__)
        self._pbar = manager.counter(total=len(self._files)*3, desc=self.LOG_PREFIX, unit="prompts", color=self.PBAR_COLOR)

    def generate(self) -> dict:
        self._log.log(code_utils.LOG_LEVEL, self.LOG_PREFIX + f"{self._config['gllm']['name']} is generating...")
        stats_key = self._config['gllm']['description_prefix'] + "Doc"
        stats = {stats_key: {}}
        for f in self._files:
            t1 = time.time()
            input_file = open(f, 'r')
            input_file_split = f.split("/")
            input_file_name = input_file_split[len(input_file_split)-1]
            output_file_name = self._config['gllm']['gen_file_prefix'] + input_file_split[len(input_file_split)-1].split(".")[0] + ".md"
            output_file_path = self._config['output']['doc_path']+"/"+output_file_name
            os.makedirs(os.path.dirname(output_file_path), exist_ok=True)
            open(output_file_path, 'w').close() #clear output file
            output_file = open(self._config['output']['doc_path']+"/"+output_file_name, 'a') # append the output file
            output_file.write("\n" + "# "+ self._config['gllm']['description_prefix'] + ": " + input_file_name + "\n")
            code_file_str_for_prompt = "Consider the following code: \n" + input_file.read()
            chat = self._model.start_chat()
            chat.send_message(code_file_str_for_prompt)
            ps = jsonl.open(self._prompts_file_str)
            for prompt in ps:
                content = chat.send_message(prompt['description'])
                output_file.write("\n" + "## "+ prompt['title']+ ": " + input_file_name + "\n")
                output_file.write(content.text)
                output_file.write("\n")
                output_file.write("\n" + "(Generated by "+ self._config['author'] + 
                            " using " + self._config['gllm']['name'] + " " + 
                            self._config['gllm']['model'] +")\n")
                self._log.log(code_utils.LOG_LEVEL, self.LOG_PREFIX + content.text)
                self._pbar.update()
            input_file.close()
            output_file.close()
            t2 = time.time()
            stats[stats_key][output_file_name] = t2-t1
        return stats